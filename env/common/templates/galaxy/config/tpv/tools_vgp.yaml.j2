---

tools:

  # abstract tools

  _conda_local:
    abstract: true
    scheduling:
      require:
      - conda
      reject:
      - singularity
      - hpc
      - pulsar
      - offline

  _galaxy_lib_local:
    abstract: true
    params:
      container_override:
      - type: singularity
        shell: /bin/sh
        identifier: /cvmfs/singularity.galaxyproject.org/all/centos:8.3.2011
    env:
      - name: SINGULARITYENV_PREPEND_PATH
        value: $GALAXY_VIRTUAL_ENV/bin
      - name: SINGULARITYENV_PYTHONPATH
        value: $GALAXY_LIB
    scheduling:
      require:
      - singularity
      reject:
      - hpc
      - pulsar
      - offline

  # non-pulsar non-singularity tools

  upload1: {inherits: _conda_local}
  __.*__: {inherits: _conda_local}
  export_remote: {inherits: _conda_local}

  # galaxy lib tools in singularity

  # these are covered by the default tool rules now
  #toolshed.g2.bx.psu.edu/repos/iuc/compose_text_param/compose_text_param/.*: {inherits: _galaxy_lib_local}
  #toolshed.g2.bx.psu.edu/repos/iuc/map_param_value/map_param_value.*: {inherits: _galaxy_lib_local}
  #param_value_from_file: {inherits: _galaxy_lib_local}
  #pick_value: {inherits: _galaxy_lib_local}


  # as of 23.1, these have no requirement tags

  addValue:
    params:
      container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.26.2"}]
  # there are both a framework and a TS version
  toolshed.g2.bx.psu.edu/repos/devteam/add_value/addValue/.*:
    inherits: addValue

  Paste1:
    params:
      # coreutils=8.25,perl=5.22.0.1
      container_override: [{type: singularity, shell: '/bin/bash', identifier: "/cvmfs/singularity.galaxyproject.org/all/mulled-v2-c5660771860859a51697ce13d5d74251dc4c8eb6:254c9751502b0d56aa64890243ee9ebd88e94048-0"}]
  Remove beginning1:
    params:
      container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.26.2"}]
  Condense characters1:
    params:
      container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.26.2"}]
  createInterval:
    params:
      container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.26.2"}]
  Cut1:
    params:
      container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.26.2"}]
  ChangeCase:
    params:
      container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.26.2"}]
  Extract_features1:
    params:
      container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/bx-python:0.8.9--py38hb90e610_2"}]
  comp1:
    params:
      # python=3.7,coreutils=8.30
      container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/mulled-v2-879928bcdd8adc5b4660a3f6de3703d7c7861de4:6ce96688844d469d84f94fabb34055d8dfa283c7-0"}]

  # special

  # https://github.com/bioconda/bioconda-recipes/pull/41091
  #   mulled-build --singularity --test "QT_QPA_PLATFORM='offscreen' Bandage --version" build-and-test bandage_ng=2022.09
  toolshed.g2.bx.psu.edu/repos/iuc/bandage/bandage_image/2022.09.*:
    mem: 16
    params:
      container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/main.galaxyproject.org/singularity/bandage_ng:2022.09--0"}]
    env:
    - name: SINGULARITYENV_QT_QPA_PLATFORM
      value: offscreen

  toolshed.g2.bx.psu.edu/repos/iuc/bandage/bandage_info/2022.09.*:
    inherits: toolshed.g2.bx.psu.edu/repos/iuc/bandage/bandage_image/2022.09.*

  toolshed.g2.bx.psu.edu/repos/iuc/meryl/meryl/.*:
    # 130 in the shared DB, this prevents us from wasting most of an m3.2xl.
    mem: 120
    env:
    # suppress 'tar: read-db.meryl: file changed as we read it' warning and non-zero exit code
    - name: SINGULARITY_BIND
      value: /jetstream2/scratch/main/nate/wraptar:/usr/local/sbin/tar:ro
    scheduling:
      require:
      - jetstream2

  toolshed.g2.bx.psu.edu/repos/richard-burhans/kegalign/kegalign/.*:
    gpus: 0.2
    cores: 8
    mem: 28
    context:
      js2_gpu_partition: gpu-medium
    scheduling:
      require:
      - gpu
      - pulsar

  toolshed.g2.bx.psu.edu/repos/richard-burhans/segalign/segalign/.*:
    gpus: 0.2
    cores: 8
    mem: 28
    context:
      js2_gpu_partition: gpu-medium
    scheduling:
      require:
      - gpu
      - pulsar

  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_sed_tool/.*:
    mem: 120
  toolshed.g2.bx.psu.edu/repos/iuc/ucsc_axtchain/ucsc_axtchain/.*:
    mem: 120

  toolshed.g2.bx.psu.edu/repos/richard-burhans/batched_lastz/batched_lastz/.*:
    cores: 80
    mem: 240

  # NCBI recommends AWS r6a.8xlarge: cores: 32, mem:256
  toolshed.g2.bx.psu.edu/repos/richard-burhans/ncbi_egapx/ncbi_egapx/.*:
    cores: 64
    mem: 480

  toolshed.g2.bx.psu.edu/repos/galaxy-australia/alphafold2/alphafold/.*:
    gpus: 0.2
    cores: 4
    mem: 14
    env:
    - name: SINGULARITYENV_ALPHAFOLD_AA_LENGTH_MIN
      value: "16"
    - name: SINGULARITYENV_ALPHAFOLD_AA_LENGTH_MAX
      value: "3000"
    - name: SINGULARITYENV_ALPHAFOLD_DB
      value: /cvmfs/data.galaxyproject.org/byhand/alphafold
    scheduling:
      require:
      - gpu
      accept:
      - pulsar

  toolshed.g2.bx.psu.edu/repos/chemteam/gmx_sim/gmx_sim/.*:
    gpus: 0.2
    cores: 4
    mem: 14
    scheduling:
      require:
      - gpu
      - pulsar

  # TEST we can be smarter see https://github.com/KamilSJaron/smudgeplot/wiki/smudgeplot-hetkmers#memory-requirements
  toolshed.g2.bx.psu.edu/repos/galaxy-australia/smudgeplot/smudgeplot/.*:
    cores: 32
    mem: 490

  # might be a one-off failure
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_sort_header_tool/.*:
    mem: 60

  toolshed.g2.bx.psu.edu/repos/iuc/samtools_fixmate/samtools_fixmate/.*:
    mem: 14

  toolshed.g2.bx.psu.edu/repos/iuc/trinity/trinity/.*:
    cores: 24
    mem: 250
    rules:
      - if: input_size < 0.1
        cores: 1
        mem: 4
      - if: 0.1 <= input_size < 1
        cores: 12
        mem: 92
      - if: 1 <= input_size < 4
        cores: 16
        mem: 128
      - if: 4 <= input_size < 8
        cores: 20
        mem: 190
      - if: input_size >= 80
        fail: |
          Too much data, we cannot support such large Trinity assemblies with our
          backend. Please use another server for your job.

  toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/.*:
    cores: 2
    rules:
    - if: input_size < 0.5
      cores: 4
      mem: 12
    - if: 0.5 <= input_size < 10
      cores: 30
      mem: 80
    - if: input_size >= 10
      # from AU
      #cores: 120
      #mem: 1922
      cores: 56
      mem: 94

  toolshed.g2.bx.psu.edu/repos/iuc/busco/busco/.*:
    cores: 20
    mem: 60
    env:
    # prevent premature removal of untarred busco DBs
    - name: SINGULARITYENV_TAR_OPTIONS
      value: -m

  toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/.*:
    cores: 2
    rules:
    - if: 0.25 <= input_size < 1
      cores: 4
      mem: cores * 3.6
    - if: input_size >= 1
      cores: 8
      mem: cores * 3.6

  toolshed.g2.bx.psu.edu/repos/iuc/bwa_mem2/bwa_mem2/.*:
    cores: 32
    mem: 244
    rules:
    - id: bwa_mem2_small_input_rule
      if: input_size < 0.25
      cores: 2
      mem: 7.6
    - id: bwa_mem2_medium_input_rule
      if: 0.25 <= input_size < 16
      cores: 8
      mem: 28
    - id: bwa_mem2_large_input_rule
      if: 16 <= input_size < 32
      cores: 16
      mem: 58
    - id: bwa_mem2_xlarge_input_rule
      if: 32 <= input_size < 64
      cores: 24
      mem: 120
    - id: bwa_mem2_history_reference_rule
      if: |
        helpers.job_args_match(job, app, {"reference_source": {"reference_source_selector": "history"}})
      # per https://github.com/bwa-mem2/bwa-mem2/issues/41 it's 28 * reference
      mem: |
        options = job.get_param_values(app)
        size = options["reference_source"]["ref_file"].get_size()
        min(max(float(size/1024**3) * 28, (input_size - float(size/1024**3)) * 2, 7.6), 244)

  toolshed.g2.bx.psu.edu/repos/bgruening/hifiasm/hifiasm/.*:
    cores: 4
    mem: 14
    context:
      time: 48:00:00
    rules:
    - id: hifiasm_medium_input_rule
      if: 0.5 <= input_size < 12
      cores: 8
      mem: 28
    - id: hifiasm_large_input_rule
      if: 12 <= input_size < 20
      cores: 16
      mem: 60
    - id: hifiasm_xlarge_input_rule
      if: 20 <= input_size < 32
      cores: 32
      mem: 120
    - id: hifiasm_xxlarge_input_rule
      if: 32 <= input_size < 96
      cores: 64
      mem: 244
    - id: hifiasm_xxxlarge_input_rule
      if: 96 <= input_size < 256
      cores: 64
      mem: 496
    - id: hifiasm_max_input_rule
      if: input_size >= 256
      cores: 128
      mem: 980
    #- id: hifiasm_max_input_rule
    #  if: input_size >= 256
    #  cores: 24
    #  mem: 1024
    #  scheduling:
    #    require:
    #    - bridges2-em

  toolshed.g2.bx.psu.edu/repos/devteam/kraken/kraken/.*:
    cores: 20
    mem: 20

  toolshed.g2.bx.psu.edu/repos/iuc/kraken2/kraken2/.*:
    cores: 16
    # TODO: make a helper
    mem: |
      import os
      mem = 64
      table_name = "kraken2_databases"
      lookup_column = "value"
      value_column = "path"
      value_template = "{value}/hash.k2d"
      options = job.get_param_values(app)
      lookup_value = options["kraken2_database"]
      table_value = app.tool_data_tables.get(table_name).get_entry(lookup_column, lookup_value, value_column)
      if table_value is not None:
          table_value = value_template.format(value=table_value)
          try:
              mem = int(os.path.getsize(table_value)/1024**3 * 1.2)
              log.debug("Data table '%s' lookup '%s=%s: %s=%s': %s GB",
                        table_name, lookup_column, lookup_value, value_column, table_value, mem)
          except OSError:
              log.exception("Failed to get size of: %s", table_value)
      else:
          log.warning("Data table '%s' lookup '%s=%s: %s=None' returned None!, defaulting to %s",
                      table_name, lookup_column, lookup_value, value_column, mem)
      mem + 24
    scheduling:
      accept:
      - training-exempt
      require:
      - cvmfs


  toolshed.g2.bx.psu.edu/repos/iuc/abyss/abyss-pe/.*:
    cores: 90
    mem: 120
    rules:
    - id: abyss-pe_small_input_rule
      if: input_size < 0.002
      cores: 2
      mem: 8
    - id: abyss-pe_medium_input_rule
      if: 0.002 <= input_size < 5
      cores: 32
      mem: 94

    # TODO: reject over a certain input size, what is that input size?

  toolshed.g2.bx.psu.edu/repos/nml/spades/spades/.*:
    cores: 60
    mem: 254
    rules:
    - id: spades_small_input_rule
      if: input_size < 0.005
      cores: 2
      mem: 7.6
    - id: spades_medium_input_rule
      if: 0.005 <= input_size < 2
      cores: 8
      mem: 28
    - id: spades_fail_rule
      if: input_size >= 25
      fail: "Too much data for this public service, please input fewer reads. Example method: SeqTk subsample"

  toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/.*:
    cores: 24
    mem: 80
    rules:
    - id: unicycler_small_input_rule
      if: input_size < 0.05
      cores: 1
      mem: 3.8
    - id: unicycler_medium_input_rule
      if: 0.05 <= input_size < 2
      cores: 8
      mem: 28

  toolshed.g2.bx.psu.edu/repos/devteam/ncbi_blast_plus/ncbi_blastn_wrapper/.*:
    cores: 4
    mem: 16
    rules:
    - id: ncbi_blastn_wrapper_db_rule
      if: |
        helpers.job_args_match(job, app, {'db_opts': {'db_opts_selector': 'db'}})
      cores: 24
      mem: 80
  toolshed.g2.bx.psu.edu/repos/devteam/ncbi_blast_plus/ncbi_blastp_wrapper/.*:
    inherits: toolshed.g2.bx.psu.edu/repos/devteam/ncbi_blast_plus/ncbi_blastn_wrapper/.*
  toolshed.g2.bx.psu.edu/repos/devteam/ncbi_blast_plus/ncbi_blastx_wrapper/.*:
    cores: 24
    mem: 80
  toolshed.g2.bx.psu.edu/repos/devteam/ncbi_blast_plus/ncbi_rpsblast_wrapper/.*:
    inherits: toolshed.g2.bx.psu.edu/repos/devteam/ncbi_blast_plus/ncbi_blastx_wrapper/.*
  toolshed.g2.bx.psu.edu/repos/devteam/ncbi_blast_plus/ncbi_tblastn_wrapper/.*:
    inherits: toolshed.g2.bx.psu.edu/repos/devteam/ncbi_blast_plus/ncbi_blastn_wrapper/.*
  toolshed.g2.bx.psu.edu/repos/devteam/ncbi_blast_plus/ncbi_tblastx_wrapper/.*:
    inherits: toolshed.g2.bx.psu.edu/repos/devteam/ncbi_blast_plus/ncbi_blastx_wrapper/.*

  toolshed.g2.bx.psu.edu/repos/bgruening/bionano_scaffold/bionano_scaffold/.*:
    cores: 24
    mem: 250

  toolshed.g2.bx.psu.edu/repos/bgruening/gfastats/gfastats/.*:
    cores: 4
    mem: 16

  toolshed.g2.bx.psu.edu/repos/iuc/bedtools/bedtools_coveragebed/.*:
    mem: 14

  toolshed.g2.bx.psu.edu/repos/iuc/bbtools_bbmerge/bbtools_bbmerge/.*:
    mem: 480

  verkko:
    cores: 32
    mem: 120

  toolshed.g2.bx.psu.edu/repos/iuc/mummer_nucmer/mummer_nucmer/.*:
    cores: 8
    mem: 28

  toolshed.g2.bx.psu.edu/repos/iuc/pretext_map/pretext_map/.*:
    mem: 7
